	 
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЗаполнитьСписокОтчетов();
	ЗаполнитьОтборВидовОтчетов();
КонецПроцедуры               

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьОтборы();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОтборПоПериодуПриИзменении(Элемент)
	УстановитьОтборы();
КонецПроцедуры

&НаКлиенте
Процедура РабочийПериодПриИзменении(Элемент)
	ИспользоватьОтборПоПериоду = (РабочийПериод <> Дата("00010101000000"));
	УстановитьОтборы();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОтборПоОрганизацииПриИзменении(Элемент)
	УстановитьОтборы();
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоОрганизацииПриИзменении(Элемент)
	ИспользоватьОтборПоОрганизации = ОтборПоОрганизации.Количество() > 0;
	УстановитьОтборы();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОтборПоОтчетамПриИзменении(Элемент) 
	Если Не ИспользоватьОтборПоОтчетам Тогда
		ЗаполнитьОтборВидовОтчетов();
	Иначе
		ОбновитьОтборВидОтчетов();
	КонецЕсли;
	УстановитьОтборы();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоВидовОтчетовПриИзменении(Элемент)
	УстановитьОтборы();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОтборПоВидуРасходаПриИзменении(Элемент)
	УстановитьОтборы();
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоВидуРасходовПриИзменении(Элемент)
	ИспользоватьОтборПоВидуРасхода = ОтборПоВидуРасходов.Количество() > 0;
	УстановитьОтборы();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОтборПоРазделуПриИзменении(Элемент)
	УстановитьОтборы();
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоРазделуПриИзменении(Элемент)
	ИспользоватьОтборПоРазделу = ОтборПоРазделу.Количество() > 0;
	УстановитьОтборы();
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборы()

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокОтчетов.КомпоновщикНастроек.Настройки.Отбор, "ДатаНачала", РабочийПериод.ДатаНачала, ВидСравненияКомпоновкиДанных.БольшеИлиРавно,,ИспользоватьОтборПоПериоду);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокОтчетов.КомпоновщикНастроек.Настройки.Отбор, "ДатаОкончания", РабочийПериод.ДатаОкончания, ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,,ИспользоватьОтборПоПериоду);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокОтчетов.КомпоновщикНастроек.Настройки.Отбор, "Организация", ОтборПоОрганизации, ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии,,ИспользоватьОтборПоОрганизации);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокОтчетов.КомпоновщикНастроек.Настройки.Отбор, "ВидОтчета", ОтборВидовОтчетов, ВидСравненияКомпоновкиДанных.ВСписке,,Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокОтчетов.КомпоновщикНастроек.Настройки.Отбор, "ВидРасходов", ОтборПоВидуРасходов, ВидСравненияКомпоновкиДанных.ВСписке,,ИспользоватьОтборПоВидуРасхода);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокОтчетов.КомпоновщикНастроек.Настройки.Отбор, "Раздел", ОтборПоРазделу, ВидСравненияКомпоновкиДанных.ВСписке,,ИспользоватьОтборПоРазделу);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокОтчетов()
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	             |	0 КАК Использовать,
	             |	РегламентированныеОтчеты.Ссылка КАК ВидОтчета
	             |ИЗ
	             |	Справочник.РегламентированныеОтчеты КАК РегламентированныеОтчеты
	             |ГДЕ
	             |	РегламентированныеОтчеты.ПометкаУдаления = ЛОЖЬ
	             |	И РегламентированныеОтчеты.Ссылка В(&СписокОтчетов)
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	РегламентированныеОтчеты.Ссылка ИЕРАРХИЯ
	             |АВТОУПОРЯДОЧИВАНИЕ";
	
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Справочники.РегламентированныеОтчеты.НайтиПоКоду("001001"));
	СписокЗначений.Добавить(Справочники.РегламентированныеОтчеты.НайтиПоКоду("001002"));
	СписокЗначений.Добавить(Справочники.РегламентированныеОтчеты.НайтиПоКоду("001003"));
	Запрос.УстановитьПараметр("СписокОтчетов", СписокЗначений);
	РезультатЗапроса=Запрос.Выполнить();
	мДеревоВидовОтчетов=РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ЗначениеВРеквизитФормы(мДеревоВидовОтчетов,"ДеревоВидовОтчетов");
	
КонецПроцедуры 

&НаКлиенте
Процедура ДеревоВидовОтчетовИспользоватьПриИзменении(Элемент)
	Если ИспользоватьОтборПоОтчетам Тогда
		ОбновитьОтборВидОтчетов();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтборВидОтчетов()
	
	ОтборВидовОтчетов.Очистить();
	
	ПолучитьСписокВыбранныхЭлементовРекурсивно(ДеревоВидовОтчетов.ПолучитьЭлементы())
	
КонецПроцедуры	

&НаКлиенте
Процедура ПолучитьСписокВыбранныхЭлементовРекурсивно(КоллекцияЭлементов)

	Для Каждого ЭлементДерева Из КоллекцияЭлементов Цикл
		
		Если ЭлементДерева.Использовать = 1 Тогда
			ОтборВидовОтчетов.Добавить(ЭлементДерева.ВидОтчета);			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры // ПолучитьСписокВыбранныхЭлементов() 

&НаСервере
Процедура ЗаполнитьОтборВидовОтчетов()
	
	ОтборВидовОтчетов.Очистить();
	ОтборВидовОтчетов.Добавить(Справочники.РегламентированныеОтчеты.НайтиПоКоду("001001"));
	ОтборВидовОтчетов.Добавить(Справочники.РегламентированныеОтчеты.НайтиПоКоду("001002"));
	ОтборВидовОтчетов.Добавить(Справочники.РегламентированныеОтчеты.НайтиПоКоду("001003"));
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	ДиалогВыбораФайла.Каталог = ""; 
    ДиалогВыбораФайла.МножественныйВыбор = Ложь; 
    ДиалогВыбораФайла.Заголовок = "Выберите каталог"; 
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		КаталогВыгрузки = ДиалогВыбораФайла.Каталог;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыгрузитьНаСервере(инд) 	
		
	ОтчетОбъект = РеквизитФормыВЗначение("Обработка");	
		
	стр = ТаблицаОтчетов[инд];
	
	СписокСохранения = стр.РегламентированныйОтчет.ДанныеОтчета.Получить(); 
	
	ПеречниНадбавок = ПереченьНадбавок();
	Показатели = СписокСохранения.ПоказателиОтчета;
	ДанныеПоРазделам = СписокСохранения.ДанныеМногострочныхРазделов; 
	
	ОтчетСсылка = стр.РегламентированныйОтчет;
	ДанныеОтчета = Новый Структура;
	ДанныеОтчета.Вставить("Организация", стр.Организация);
	ДанныеОтчета.Вставить("Период", стр.ФинансовыйПериод);
	ДанныеОтчета.Вставить("ВидОтчета", стр.ВидОтчета.Код);
	ДанныеОтчета.Вставить("Раздел", ОтчетСсылка.РазделПодраздел); 
	ДанныеОтчета.Вставить("КодРаздела", ОтчетСсылка.РазделПодраздел.Код);
	ДанныеОтчета.Вставить("ВидРасходов", ОтчетСсылка.ВидРасходов); 
	ДанныеОтчета.Вставить("КодВидаРасходов", ОтчетСсылка.ВидРасходов.Код);
	ДанныеОтчета.Вставить("Документ", ОтчетСсылка);
	ДанныеОтчета.Вставить("ПеречниНадбавок", ПеречниНадбавок);
	
	ДанныеОтчета.Вставить("ДанныеПоРазделам", ДанныеПоРазделам); 
	ДанныеОтчета.Вставить("Показатели", Показатели);
	
	Адрес = ОтчетОбъект.РезультатПреобразования(ДанныеОтчета);
	
	Возврат Адрес;		
		
КонецФункции

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ПодготовитьТаблицуОтчетов();
	
	ЗаполнитьТаблицыНадбавок();
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = "Начало выгрузки " + ТекущаяДата();
	Сообщение.Сообщить();

	Индикатор = 0;
	КоличествоОтчетов = ТаблицаОтчетов.Количество(); 
	
	Для инд = 0 По КоличествоОтчетов - 1 Цикл
		
		Адрес = ВыгрузитьНаСервере(инд);  
		
		Индикатор=(Инд+1)/КоличествоОтчетов*100;
		
		ДвоничныеДанные = ПолучитьИзВременногоХранилища(Адрес);
		
		стр = ТаблицаОтчетов[инд];
		ПараметрыОтчета = Новый Структура;
		ПараметрыОтчета.Вставить("ВидОтчета", КодСправочника(стр.ВидОтчета));
		ПараметрыОтчета.Вставить("Период", стр.ФинансовыйПериод);
		ПараметрыОтчета.Вставить("КодОрганизации",  КодСправочника(стр.Организация));
		ПараметрыОтчета.Вставить("Отчет", стр.РегламентированныйОтчет);
		
		ИмяФайла = ИмяФайла(ПараметрыОтчета); 
		ИмяФайла = КаталогВыгрузки + "\" + ИмяФайла + ".json";
		ДвоничныеДанные.Записать(ИмяФайла);

	КонецЦикла;	         
   	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = "Выгрузка завершена";
	Сообщение.Сообщить(); 
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = "Окончание выгрузки " + ТекущаяДата();
	Сообщение.Сообщить();
	
КонецПроцедуры 

&НаСервере
Функция КодСправочника(ЭлементСправочника)
	
	Возврат ЭлементСправочника.Код;
	
КонецФункции

&НаСервере
Процедура ПодготовитьТаблицуОтчетов()
	
	ТаблицаОтчетов.Загрузить(СписокВТЗнаСервере());

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицыНадбавок()
	
	ТекДата = ТекущаяДатаСеанса();
	
	// ВОЕННЫЕ
	
	КатегорияВоен = Перечисления.гндлф_КатегорииСотрудниковДля3ОБ.ВСЛ;
	
	// Увел окладов 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Справочникгндлф_КвалРазрядЛетчиков.Код КАК Код,
		|	Справочникгндлф_КвалРазрядЛетчиков.ИмяПредопределенныхДанных КАК Имя,
		|	ЕСТЬNULL(гндлф_УвеличениеДОЛетчиковСрезПоследних.Размер, 0) КАК Размер,
		|	Справочникгндлф_КвалРазрядЛетчиков.Наименование КАК Наименование
		|ИЗ
		|	Справочник.гндлф_КвалРазрядЛетчиков КАК Справочникгндлф_КвалРазрядЛетчиков
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гндлф_УвеличениеДОЛетчиков.СрезПоследних(&Дата, Категория = &КатегорияСотрудников) КАК гндлф_УвеличениеДОЛетчиковСрезПоследних
		|		ПО (гндлф_УвеличениеДОЛетчиковСрезПоследних.КвалификационныйРазряд = Справочникгндлф_КвалРазрядЛетчиков.Ссылка)
		|ГДЕ
		|	ЕСТЬNULL(гндлф_УвеличениеДОЛетчиковСрезПоследних.Размер, 0) > 0";
	
	Запрос.УстановитьПараметр("Дата", ТекДата);
	Запрос.УстановитьПараметр("КатегорияСотрудников", КатегорияВоен);
	
	ПереченьНадбавокУвеличениеОкладовВоен.Загрузить(Запрос.Выполнить().Выгрузить());	
	
	// Выслуга лет
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Справочникгндлф_СтажВыслугаЛет.Код КАК Код,
		|	Справочникгндлф_СтажВыслугаЛет.Наименование КАК Наименование,
		|	Справочникгндлф_СтажВыслугаЛет.ИмяПредопределенныхДанных КАК Имя,
		|	ЕСТЬNULL(гндлф_НадбавкаЗаВыслугуЛетСрезПоследних.Размер, 0) КАК Размер
		|ИЗ
		|	Справочник.гндлф_СтажВыслугаЛет КАК Справочникгндлф_СтажВыслугаЛет
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гндлф_НадбавкаЗаВыслугуЛет.СрезПоследних(&Дата, Категория = &КатегорияСотрудников) КАК гндлф_НадбавкаЗаВыслугуЛетСрезПоследних
		|		ПО (гндлф_НадбавкаЗаВыслугуЛетСрезПоследних.Стаж = Справочникгндлф_СтажВыслугаЛет.Ссылка)
		|ГДЕ
		|	ЕСТЬNULL(гндлф_НадбавкаЗаВыслугуЛетСрезПоследних.Размер, 0) > 0";
	
	Запрос.УстановитьПараметр("Дата", ТекДата);
	Запрос.УстановитьПараметр("КатегорияСотрудников", КатегорияВоен);
	
	ПереченьНадбавокВыслугаЛет.Загрузить(Запрос.Выполнить().Выгрузить());
	
	// Классность
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Справочникгндлф_КвалЗвание.Код КАК Код,
		|	Справочникгндлф_КвалЗвание.Наименование КАК Наименование,
		|	Справочникгндлф_КвалЗвание.ИмяПредопределенныхДанных КАК Имя,
		|	ЕСТЬNULL(гндлф_НадбавкаЗаКвалификационноеЗваниеСрезПоследних.Размер, 0) КАК Размер
		|ИЗ
		|	Справочник.гндлф_КвалЗвание КАК Справочникгндлф_КвалЗвание
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гндлф_НадбавкаЗаКвалификационноеЗвание.СрезПоследних(&Дата, Категория = &КатегорияСотрудников) КАК гндлф_НадбавкаЗаКвалификационноеЗваниеСрезПоследних
		|		ПО (гндлф_НадбавкаЗаКвалификационноеЗваниеСрезПоследних.КвалификационноеЗвание = Справочникгндлф_КвалЗвание.Ссылка)
		|ГДЕ
		|	ЕСТЬNULL(гндлф_НадбавкаЗаКвалификационноеЗваниеСрезПоследних.Размер, 0) > 0";
	
	Запрос.УстановитьПараметр("Дата", ТекДата);
	Запрос.УстановитьПараметр("КатегорияСотрудников", КатегорияВоен);
	
	ПереченьНадбавокКлассность.Загрузить(Запрос.Выполнить().Выгрузить());
	
	// Гостайна	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Справочникгндлф_СтепеньСекретности.Код КАК Код,
		|	Справочникгндлф_СтепеньСекретности.Наименование КАК Наименование,
		|	Справочникгндлф_СтепеньСекретности.ИмяПредопределенныхДанных КАК Имя,
		|	ЕСТЬNULL(гндлф_НадбавкаЗаГосТайнуСрезПоследних.Размер, 0) КАК Размер
		|ИЗ
		|	Справочник.гндлф_СтепеньСекретности КАК Справочникгндлф_СтепеньСекретности
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гндлф_НадбавкаЗаГосТайну.СрезПоследних(&Дата, Категория = &КатегорияСотрудников) КАК гндлф_НадбавкаЗаГосТайнуСрезПоследних
		|		ПО (гндлф_НадбавкаЗаГосТайнуСрезПоследних.СтепеньСекретности = Справочникгндлф_СтепеньСекретности.Ссылка)
		|ГДЕ
		|	ЕСТЬNULL(гндлф_НадбавкаЗаГосТайнуСрезПоследних.Размер, 0) > 0";
	
	Запрос.УстановитьПараметр("Дата", ТекДата);
	Запрос.УстановитьПараметр("КатегорияСотрудников", КатегорияВоен);
	
	ПереченьНадбавокГостайна.Загрузить(Запрос.Выполнить().Выгрузить());
	
	// Особые условия
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Справочникгндлф_ПроцентНадбавкиЗаОсобыеУсловия.Код КАК Код,
		|	Справочникгндлф_ПроцентНадбавкиЗаОсобыеУсловия.Наименование КАК Наименование,
		|	Справочникгндлф_ПроцентНадбавкиЗаОсобыеУсловия.ИмяПредопределенныхДанных КАК Имя,
		|	ЕСТЬNULL(гндлф_НадбавкаЗаОсобыеУсловияСрезПоследних.Размер, 0) КАК Размер
		|ИЗ
		|	Справочник.гндлф_ПроцентНадбавкиЗаОсобыеУсловия КАК Справочникгндлф_ПроцентНадбавкиЗаОсобыеУсловия
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гндлф_НадбавкаЗаОсобыеУсловия.СрезПоследних(&Дата, ) КАК гндлф_НадбавкаЗаОсобыеУсловияСрезПоследних
		|		ПО (гндлф_НадбавкаЗаОсобыеУсловияСрезПоследних.ПроцентНадбавки = Справочникгндлф_ПроцентНадбавкиЗаОсобыеУсловия.Ссылка)
		|ГДЕ
		|	ЕСТЬNULL(гндлф_НадбавкаЗаОсобыеУсловияСрезПоследних.Размер, 0) > 0";
	
	Запрос.УстановитьПараметр("Дата", ТекДата);
	
	ПереченьНадбавокОсобыеУсловия.Загрузить(Запрос.Выполнить().Выгрузить());
	
    // Поощрительные
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Справочникгндлф_ПроцентВыплатыЗаОсобыеДостижения.Код КАК Код,
		|	Справочникгндлф_ПроцентВыплатыЗаОсобыеДостижения.Наименование КАК Наименование,
		|	Справочникгндлф_ПроцентВыплатыЗаОсобыеДостижения.ИмяПредопределенныхДанных КАК Имя,
		|	ЕСТЬNULL(гндлф_ВыплатаЗаОсобыеДостиженияСрезПоследних.Размер, 0) КАК Размер
		|ИЗ
		|	Справочник.гндлф_ПроцентВыплатыЗаОсобыеДостижения КАК Справочникгндлф_ПроцентВыплатыЗаОсобыеДостижения
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гндлф_ВыплатаЗаОсобыеДостижения.СрезПоследних(&Дата, ) КАК гндлф_ВыплатаЗаОсобыеДостиженияСрезПоследних
		|		ПО Справочникгндлф_ПроцентВыплатыЗаОсобыеДостижения.Ссылка = гндлф_ВыплатаЗаОсобыеДостиженияСрезПоследних.ПроцентВыплаты
		|ГДЕ
		|	ЕСТЬNULL(гндлф_ВыплатаЗаОсобыеДостиженияСрезПоследних.Размер, 0) > 0";
	
	Запрос.УстановитьПараметр("Дата", ТекДата);
	
	ПереченьНадбавокПоощрения.Загрузить(Запрос.Выполнить().Выгрузить());
	
	// Районный коэффициент
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Справочникгндлф_ПроцентРайонногоКоэффициента.Код КАК Код,
		|	Справочникгндлф_ПроцентРайонногоКоэффициента.Наименование КАК Наименование,
		|	Справочникгндлф_ПроцентРайонногоКоэффициента.ИмяПредопределенныхДанных КАК Имя,
		|	ЕСТЬNULL(гндлф_РайонныйКоэффициентСрезПоследних.Размер, 0) КАК Размер
		|ИЗ
		|	Справочник.гндлф_ПроцентРайонногоКоэффициента КАК Справочникгндлф_ПроцентРайонногоКоэффициента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гндлф_РайонныйКоэффициент.СрезПоследних(&Дата, ) КАК гндлф_РайонныйКоэффициентСрезПоследних
		|		ПО (гндлф_РайонныйКоэффициентСрезПоследних.ПроцентРайонногоКоэффициента = Справочникгндлф_ПроцентРайонногоКоэффициента.Ссылка)
		|ГДЕ
		|	ЕСТЬNULL(гндлф_РайонныйКоэффициентСрезПоследних.Размер, 0) > 0";
	
	Запрос.УстановитьПараметр("Дата", ТекДата);
	
	ПереченьНадбавокРайКоэффициент.Загрузить(Запрос.Выполнить().Выгрузить());
	
	// Северная надбавка
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Справочникгндлф_ПроцентСевернойНадбавки.Код КАК Код,
		|	Справочникгндлф_ПроцентСевернойНадбавки.Наименование КАК Наименование,
		|	Справочникгндлф_ПроцентСевернойНадбавки.ИмяПредопределенныхДанных КАК Имя,
		|	ЕСТЬNULL(гндлф_НадбавкаЗаСлужбуНаСевереСрезПоследних.Размер, 0) КАК Размер
		|ИЗ
		|	Справочник.гндлф_ПроцентСевернойНадбавки КАК Справочникгндлф_ПроцентСевернойНадбавки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гндлф_НадбавкаЗаСлужбуНаСевере.СрезПоследних(&Дата, ) КАК гндлф_НадбавкаЗаСлужбуНаСевереСрезПоследних
		|		ПО (гндлф_НадбавкаЗаСлужбуНаСевереСрезПоследних.ПроцентНадбавки = Справочникгндлф_ПроцентСевернойНадбавки.Ссылка)
		|ГДЕ
		|	ЕСТЬNULL(гндлф_НадбавкаЗаСлужбуНаСевереСрезПоследних.Размер, 0) > 0";
	
	Запрос.УстановитьПараметр("Дата", ТекДата);
	
	ПереченьНадбавокСеверная.Загрузить(Запрос.Выполнить().Выгрузить());
	
	// Юридическая надбавка
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Справочникгндлф_ПроцентЮридическойНадбавки.Код КАК Код,
		|	Справочникгндлф_ПроцентЮридическойНадбавки.Наименование КАК Наименование,
		|	Справочникгндлф_ПроцентЮридическойНадбавки.ИмяПредопределенныхДанных КАК Имя,
		|	ЕСТЬNULL(гндлф_НадбавкаЮридическихПодразделенийСрезПоследних.Размер, 0) КАК Размер
		|ИЗ
		|	Справочник.гндлф_ПроцентЮридическойНадбавки КАК Справочникгндлф_ПроцентЮридическойНадбавки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гндлф_НадбавкаЮридическихПодразделений.СрезПоследних(&Дата, ) КАК гндлф_НадбавкаЮридическихПодразделенийСрезПоследних
		|		ПО (гндлф_НадбавкаЮридическихПодразделенийСрезПоследних.ПроцентНадбавки = Справочникгндлф_ПроцентЮридическойНадбавки.Ссылка)
		|ГДЕ
		|	ЕСТЬNULL(гндлф_НадбавкаЮридическихПодразделенийСрезПоследних.Размер, 0) > 0";
	
	Запрос.УстановитьПараметр("Дата", ТекДата);
	
	ПереченьНадбавокЮридическая.Загрузить(Запрос.Выполнить().Выгрузить());
	
	// Стаж гостайны
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Справочникгндлф_СтажГосТайны.Код КАК Код,
		|	Справочникгндлф_СтажГосТайны.Наименование КАК Наименование,
		|	Справочникгндлф_СтажГосТайны.ИмяПредопределенныхДанных КАК Имя,
		|	ЕСТЬNULL(гндлф_НадбавкаЗаСтажЗащитыГосТайныСрезПоследних.Размер, 0) КАК Размер
		|ИЗ
		|	Справочник.гндлф_СтажГосТайны КАК Справочникгндлф_СтажГосТайны
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гндлф_НадбавкаЗаСтажЗащитыГосТайны.СрезПоследних(&Дата, Категория = &КатегорияСотрудников) КАК гндлф_НадбавкаЗаСтажЗащитыГосТайныСрезПоследних
		|		ПО (гндлф_НадбавкаЗаСтажЗащитыГосТайныСрезПоследних.ПроцентНадбавки = Справочникгндлф_СтажГосТайны.Ссылка)
		|ГДЕ
		|	ЕСТЬNULL(гндлф_НадбавкаЗаСтажЗащитыГосТайныСрезПоследних.Размер, 0) > 0";
	
	Запрос.УстановитьПараметр("Дата", ТекДата);
	Запрос.УстановитьПараметр("КатегорияСотрудников", КатегорияВоен);
	
	ПереченьНадбавокСтажГостайна.Загрузить(Запрос.Выполнить().Выгрузить());
	
	// Стаж шифр
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Справочникгндлф_СтажШифровальщики.Код КАК Код,
		|	Справочникгндлф_СтажШифровальщики.Наименование КАК Наименование,
		|	Справочникгндлф_СтажШифровальщики.ИмяПредопределенныхДанных КАК Имя,
		|	ЕСТЬNULL(гндлф_НадбавкаЗаСтажШифровальщикиСрезПоследних.Размер, 0) КАК Размер
		|ИЗ
		|	Справочник.гндлф_СтажШифровальщики КАК Справочникгндлф_СтажШифровальщики
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гндлф_НадбавкаЗаСтажШифровальщики.СрезПоследних(&Дата, Категория = &КатегорияСотрудников) КАК гндлф_НадбавкаЗаСтажШифровальщикиСрезПоследних
		|		ПО (гндлф_НадбавкаЗаСтажШифровальщикиСрезПоследних.Стаж = Справочникгндлф_СтажШифровальщики.Ссылка)
		|ГДЕ
		|	ЕСТЬNULL(гндлф_НадбавкаЗаСтажШифровальщикиСрезПоследних.Размер, 0) > 0";
	
	Запрос.УстановитьПараметр("Дата", ТекДата);
	Запрос.УстановитьПараметр("КатегорияСотрудников", КатегорияВоен);
	
	ПереченьНадбавокСтажШифр.Загрузить(Запрос.Выполнить().Выгрузить()); 
	
	// Служба в СКР
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Справочникгндлф_ОснованиеНадбавкиСКР.Код КАК Код,
		|	Справочникгндлф_ОснованиеНадбавкиСКР.Наименование КАК Наименование,
		|	Справочникгндлф_ОснованиеНадбавкиСКР.ИмяПредопределенныхДанных КАК Имя,
		|	ЕСТЬNULL(гндлф_НадбавкаСКРСрезПоследних.Размер, 0) КАК Размер
		|ИЗ
		|	Справочник.гндлф_ОснованиеНадбавкиСКР КАК Справочникгндлф_ОснованиеНадбавкиСКР
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.гндлф_НадбавкаСКР.СрезПоследних(&Дата, ) КАК гндлф_НадбавкаСКРСрезПоследних
		|		ПО (гндлф_НадбавкаСКРСрезПоследних.Основание = Справочникгндлф_ОснованиеНадбавкиСКР.Ссылка)
		|ГДЕ
		|	ЕСТЬNULL(гндлф_НадбавкаСКРСрезПоследних.Размер, 0) > 0";
	
	Запрос.УстановитьПараметр("Дата", ТекДата);
	
	ПереченьНадбавокСлужбаСКР.Загрузить(Запрос.Выполнить().Выгрузить());
		
КонецПроцедуры

&НаСервере
Функция ПереченьНадбавок()

	Надбавки = Новый Структура;
	
	Надбавки.Вставить("ПереченьНадбавокВыслугаЛет", ПереченьНадбавокВыслугаЛет.Выгрузить());
	Надбавки.Вставить("ПереченьНадбавокГостайна", ПереченьНадбавокГостайна.Выгрузить());
	Надбавки.Вставить("ПереченьНадбавокКлассность", ПереченьНадбавокКлассность.Выгрузить());
    Надбавки.Вставить("ПереченьНадбавокОсобыеУсловия", ПереченьНадбавокОсобыеУсловия.Выгрузить());
	Надбавки.Вставить("ПереченьНадбавокПоощрения", ПереченьНадбавокПоощрения.Выгрузить());
	Надбавки.Вставить("ПереченьНадбавокРайКоэффициент", ПереченьНадбавокРайКоэффициент.Выгрузить());
	Надбавки.Вставить("ПереченьНадбавокСеверная", ПереченьНадбавокСеверная.Выгрузить());
	Надбавки.Вставить("ПереченьНадбавокСлужбаСКР", ПереченьНадбавокСлужбаСКР.Выгрузить());
	Надбавки.Вставить("ПереченьНадбавокСтажГостайна", ПереченьНадбавокСтажГостайна.Выгрузить());
	Надбавки.Вставить("ПереченьНадбавокСтажШифр", ПереченьНадбавокСтажШифр.Выгрузить()); 
	Надбавки.Вставить("ПереченьНадбавокУвеличениеОкладовВоен", ПереченьНадбавокУвеличениеОкладовВоен.Выгрузить());
    Надбавки.Вставить("ПереченьНадбавокЮридическая", ПереченьНадбавокЮридическая.Выгрузить());
	
	Возврат Надбавки;	
	
КонецФункции

&НаСервере
Функция СписокВТЗнаСервере()

    Схема = Элементы.СписокОтчетов.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
    Настройки = Элементы.СписокОтчетов.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
    МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки, , ,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
    
    ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
    
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
    ТаблицаРезультат = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Возврат ТаблицаРезультат;

КонецФункции    

//#Область ПрограммныйИнтерфейс

Функция JSON(Значение,СтруктураТипов) 
	Возврат НеФорматированныйJSON(Значение,СтруктураТипов);	
КонецФункции

//#КонецОбласти 

//#Область СлужебныеФункции
  
//В функции конструкции условий расставлены по частоте их использования.
//Если кому нибудь удастся более оптимально (в смысле быстродействия) написать,
//то просьба сообщить мне на bigb.forum@gmail.com
Функция НеФорматированныйJSON(Значение,СтруктураТипов=Неопределено)
	
	Если СтруктураТипов=Неопределено Тогда
		СоответствиеХМЛ = Новый Соответствие;
		СоответствиеОбъектов  = Новый Соответствие;
		СтруктураТипов = Новый Структура("СоответствиеХМЛ,СоответствиеОбъектов",СоответствиеХМЛ,СоответствиеОбъектов);
	Иначе
		СоответствиеХМЛ = СтруктураТипов.СоответствиеХМЛ;
		СоответствиеОбъектов  = СтруктураТипов.СоответствиеОбъектов;
	КонецЕсли; 
	
	Разделитель="";
	
	ТипЗн=ТипЗнч(Значение);
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗн);

	Если ТипЗн=Тип("Строка") Тогда
		Стр=""""+Экранировать(Значение)+""""

	ИначеЕсли ТипЗн=Тип("Число") ИЛИ ТипЗнч(Значение)=Тип("Булево") Тогда
		Стр=XMLСтрока(Значение)

	//ИначеЕсли ТипЗн=Тип("Дата") Тогда
	//	Стр=""""+?(ЗначениеЗаполнено(Значение),XMLСтрока(Значение),"")+""""

	ИначеЕсли ТипЗн=Тип("Структура") Тогда
		Стр="{";
		Для Каждого Параметр Из Значение Цикл
			Стр=Стр+Разделитель+Символы.ПС+""""+Параметр.Ключ+""":"+НеФорматированныйJSON(Параметр.Значение,СтруктураТипов);
			Разделитель=","
		КонецЦикла;
		Стр=Стр+Символы.ПС+"}";

	ИначеЕсли ТипЗн=Тип("Массив") Тогда
		Стр="[";
		Для Каждого Элемент Из Значение Цикл
			Стр=Стр+Разделитель+Символы.ПС+НеФорматированныйJSON(Элемент,СтруктураТипов);
			Разделитель=","
		КонецЦикла;
		Стр=Стр+Символы.ПС+"]";

	ИначеЕсли ТипЗн=Тип("ТаблицаЗначений") Тогда
		Колонки=Значение.Колонки;
		СтруктураТЗ = Новый Структура;
		СтруктураТЗ.Вставить("TYPE","ТаблицаЗначений");
		СтруктураТЗ.Вставить("COLUMNS",Новый Структура);
		СтруктураТЗ.Вставить("ROWS",Новый Массив);
		Для Каждого Колонка Из Колонки Цикл
			СтруктураТЗ.COLUMNS.Вставить(Колонка.Имя,);
		КонецЦикла;
		Для Каждого СтрокаТЗ Из Значение Цикл
			Структура=Новый Структура;
			Для Каждого Колонка Из Колонки Цикл
				Если ЗначениеЗаполнено(СтрокаТЗ[Колонка.Имя]) Тогда
					Структура.Вставить(Колонка.Имя,СтрокаТЗ[Колонка.Имя])
				КонецЕсли; 
			КонецЦикла;
			СтруктураТЗ.ROWS.Добавить(Структура);
		КонецЦикла;
		Стр=НеФорматированныйJSON(СтруктураТЗ,СтруктураТипов)
		
	ИначеЕсли Значение=Неопределено Тогда
		Стр="null"
		
	ИначеЕсли ОбъектМетаданных <> Неопределено И Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
		
		ЗначениеСтруктурой = Новый Структура("TYPE,UID,Наименование,Код",СоответствиеХМЛ.Получить(ТипЗн),XMLСтрока(Значение), Значение.Наименование, Значение.Код);
		Стр=НеФорматированныйJSON(ЗначениеСтруктурой,СтруктураТипов)

		
	ИначеЕсли СоответствиеХМЛ.Получить(ТипЗн) <> Неопределено Тогда
		
		ЗначениеСтруктурой = Новый Структура("TYPE,UID",СоответствиеХМЛ.Получить(ТипЗн),XMLСтрока(Значение));
		Стр=НеФорматированныйJSON(ЗначениеСтруктурой,СтруктураТипов)
		
	ИначеЕсли СоответствиеОбъектов.Получить(ТипЗн) <> Неопределено Тогда
		
		ЗначениеСтруктурой = Новый Структура("OBJECT,NEW",Истина,СоответствиеОбъектов.Получить(ТипЗн));
		ЗначениеСтруктурой.Вставить("SAVE",СтруктураТипов.Свойство("SAVE") И СтруктураТипов.SAVE = Истина);
		
		МетаданныеЗначения = Значение.Метаданные();
		
		Для каждого СтандартныйРеквизит Из МетаданныеЗначения.СтандартныеРеквизиты Цикл
		    ЗначениеСтруктурой.Вставить(СтандартныйРеквизит.Имя,Значение[СтандартныйРеквизит.Имя]);
		КонецЦикла; 
		
		ЭтоГруппа = ЗначениеСтруктурой.Свойство("ЭтоГруппа") И ЗначениеСтруктурой.ЭтоГруппа = Истина;
								
		Если ЭтоГруппа Тогда
		    ЗначениеСтруктурой.NEW = СтрЗаменить(ЗначениеСтруктурой.NEW,"СоздатьЭлемент()","СоздатьГруппу()");
		КонецЕсли; 
		Для каждого Реквизит Из МетаданныеЗначения.Реквизиты Цикл
			Если ЭтоГруппа И Реквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента Тогда
				Продолжить;
			КонецЕсли; 
			
			Если ЗначениеЗаполнено(Значение[Реквизит.Имя]) Тогда
				ЗначениеСтруктурой.Вставить(Реквизит.Имя,Значение[Реквизит.Имя]);
			КонецЕсли; 
		КонецЦикла; 
		Для каждого ТабличнаяЧасть Из МетаданныеЗначения.ТабличныеЧасти Цикл
			Если ЭтоГруппа И ТабличнаяЧасть.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента Тогда
				Продолжить;
			КонецЕсли; 

			Если Значение[ТабличнаяЧасть.Имя].Количество()>0 Тогда
			    ЗначениеСтруктурой.Вставить(ТабличнаяЧасть.Имя,Значение[ТабличнаяЧасть.Имя].Выгрузить());
			КонецЕсли; 
		КонецЦикла; 
		Стр=НеФорматированныйJSON(ЗначениеСтруктурой,СтруктураТипов)
	Иначе
		Стр=""""+Экранировать(Значение)+""""
	КонецЕсли;

	Возврат Стр
КонецФункции

Функция ПолучитьЗначениеJSON(СтрJSON,СтруктураТипов,Значение,Позиция=1,Ключ="")
	Перем Кавычка;

	СоответствиеХМЛ           = СтруктураТипов.СоответствиеХМЛ;
	МассивТиповТекст          = СтруктураТипов.МассивТиповТекст;
	МассивОтсутствующихТипов  = СтруктураТипов.МассивОтсутствующихТипов;
	
	ЗначениеВСтроке="";
	Кавычек=0;
	Комментарий=Ложь;
	Строка=Ложь;

	Пока Позиция<=СтрДлина(СтрJSON) Цикл
		ХХ=Сред(СтрJSON,Позиция,2);
		Х=Лев(ХХ,1);
		Позиция=Позиция+1;

		Если Х>" " ИЛИ Строка Тогда //Отсекаем всякий хлам

			Если Комментарий Тогда
				//Это комментарий. Крутимся в цикле пока не встретится конец комментария
				Если ХХ="*/" Тогда
					//Комментарий закончился
					Комментарий=Ложь;
					Позиция=Позиция+1;
				КонецЕсли;

			ИначеЕсли Х="\" Тогда
				Позиция=Позиция+1;
				ХХ=ВРег(ХХ);
				Если ХХ="\""" Тогда ЗначениеВСтроке=ЗначениеВСтроке+""""
				ИначеЕсли ХХ="\\" Тогда ЗначениеВСтроке=ЗначениеВСтроке+"\"
				ИначеЕсли ХХ="\/" Тогда ЗначениеВСтроке=ЗначениеВСтроке+"/"
				ИначеЕсли ХХ="\:" Тогда ЗначениеВСтроке=ЗначениеВСтроке+":"
				ИначеЕсли ХХ="\," Тогда ЗначениеВСтроке=ЗначениеВСтроке+","
				ИначеЕсли ХХ="\B" Тогда ЗначениеВСтроке=ЗначениеВСтроке+Символ(8)
				ИначеЕсли ХХ="\F" Тогда ЗначениеВСтроке=ЗначениеВСтроке+Символы.ПФ //перевод формы (страницы)
				ИначеЕсли ХХ="\N" Тогда ЗначениеВСтроке=ЗначениеВСтроке+Символы.ПС //перевод строки
				ИначеЕсли ХХ="\R" Тогда ЗначениеВСтроке=ЗначениеВСтроке+Символы.ВК //возврат каретки
				ИначеЕсли ХХ="\T" Тогда ЗначениеВСтроке=ЗначениеВСтроке+Символы.ВТаб //символ вертикальной табуляции
				ИначеЕсли ХХ="\U" Тогда
					ЗначениеВСтроке=ЗначениеВСтроке+Символ(Hex2Число(Сред(СтрJSON,Позиция,4))); //шестнадцатиричное число
					Позиция=Позиция+4
				КонецЕсли;

			ИначеЕсли Строка Тогда
				//Если строка не закончилась - то пропускаем управляющие символы
				Если Х=Кавычка Тогда
					//Закончилась строка
					Строка=Ложь;
					Кавычек=Кавычек+1;
				Иначе
					ЗначениеВСтроке=ЗначениеВСтроке+Х;
				КонецЕсли;

			ИначеЕсли ХХ="/*" Тогда
				//Начался комментарий
				Комментарий=Истина;
				Позиция=Позиция+1;

			ИначеЕсли Найти("""'{}[]:,",Х)>0 Тогда
				Если Х="""" ИЛИ Х="'" Тогда
					//Началась строка
					//Строка - коллекция нуля или больше символов Unicode, заключенная в
					//двойные кавычки, используя "\" в качестве символа экранирования.
					//Символ представляется как односимвольная строка.
					//Похожий синтаксис используется в C и Java.
					Строка=Истина;
					Кавычка=Х;
					Кавычек=Кавычек+1;

				ИначеЕсли Х="{" Тогда
					//Начался объект
					//Объект - неупорядоченный набор пар ключ/значение.
					//Объект начинается с "{" и заканчивается "}".
					//Каждое имя сопровождается ":", пары ключ/значение разделяются ",".
					ОбъектСтруктура=Новый Структура;
					//Объект=Новый Структура;
					Пока Истина Цикл
						//Получим ключ и значение
						Ключ="";
						Режим=ПолучитьЗначениеJSON(СтрJSON,СтруктураТипов,Значение,Позиция,Ключ);
						//0 - есть значение и не конец объекта (запятая)
						//1 - есть значение и конец объекта
						//2 - нет значения и не конец объекта (запятая)
						//3 - нет значения и конец объекта
						Если Режим=0 Тогда
							ОбъектСтруктура.Вставить(Ключ,Значение);
						ИначеЕсли Режим=1 Тогда
							ОбъектСтруктура.Вставить(Ключ,Значение);
							Прервать
						ИначеЕсли Режим=3 Тогда
							Прервать
						КонецЕсли;
					КонецЦикла;
					Если ОбъектСтруктура.Свойство("UID") Тогда
						//Это простой ХМЛ тип
						Если МассивТиповТекст.Найти(ОбъектСтруктура.TYPE)<>Неопределено Тогда
							Значение = XMLЗначение(Тип(ОбъектСтруктура.TYPE),ОбъектСтруктура.UID);
						Иначе
							МассивОтсутствующихТипов.Добавить(ОбъектСтруктура.TYPE);
							Значение = ОбъектСтруктура.UID;
						КонецЕсли; 
					ИначеЕсли ОбъектСтруктура.Свойство("OBJECT") Тогда
							//Это объект
							Если ЗначениеЗаполнено(ОбъектСтруктура.Ссылка) И СоответствиеХМЛ.Получить(ТипЗнч(ОбъектСтруктура.Ссылка))<>Неопределено Тогда
								//Получаем объект
								ОбъектИБ = ОбъектСтруктура.Ссылка.ПолучитьОбъект();
								Если ОбъектИБ = Неопределено Тогда
									//Если объекта нет, то создать
									ОбъектИБ = Вычислить(ОбъектСтруктура.NEW); 
									ОбъектИБ.УстановитьСсылкуНового(ОбъектСтруктура.Ссылка);
								КонецЕсли; 
								
								//Проверим соответствие испльзования элементов для групп
								МетаданныеЗначения = ОбъектИБ.Метаданные();
								ЭтоГруппа = ОбъектСтруктура.Свойство("ЭтоГруппа") И ОбъектСтруктура.ЭтоГруппа = Истина;
								Для каждого Реквизит Из МетаданныеЗначения.Реквизиты Цикл
									Если ЭтоГруппа И Реквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента Тогда
										ОбъектСтруктура.Удалить(Реквизит.Имя)
									КонецЕсли; 
								КонецЦикла; 
								//Проверить совпадение подчиненности справочников
								Если ОбъектСтруктура.Свойство("Владелец") И МетаданныеЗначения.Владельцы.Количество()=0 Тогда
									ОбъектСтруктура.Удалить("Владелец")
								КонецЕсли; 
								
								//Заполнить реквизиты
								ЗаполнитьЗначенияСвойств(ОбъектИБ,ОбъектСтруктура);
								//Определить ТЧ и попытаться заполнить
								Для каждого ТабличнаяЧасть Из МетаданныеЗначения.ТабличныеЧасти Цикл
									//Если ТЧ для групп не используется и наш объект группа, то пропустить ТЧ
									Если ЭтоГруппа И ТабличнаяЧасть.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента Тогда
										Продолжить;
									КонецЕсли; 
									//Если есть данные о ТЧ, то заполнить ТЧ, иначе очистить
									Если ОбъектСтруктура.Свойство(ТабличнаяЧасть.Имя) И ТипЗнч(ОбъектСтруктура[ТабличнаяЧасть.Имя]) = Тип("ТаблицаЗначений") Тогда
										ОбъектИБ[ТабличнаяЧасть.Имя].Загрузить(ОбъектСтруктура[ТабличнаяЧасть.Имя]);
									Иначе 
										ОбъектИБ[ТабличнаяЧасть.Имя].Очистить();
									КонецЕсли; 
								КонецЦикла;
								Если ОбъектСтруктура.Свойство("SAVE") И ОбъектСтруктура.SAVE = Истина Тогда
								    ОбъектИБ.ОбменДанными.Загрузка = Истина;
									Попытка
										ОбъектИБ.Записать();
										ТекстСообщения = "Записан объект """+ОбъектИБ+"""";
									Исключение
										ТекстСообщения = "Не удалось записать объект """+ОбъектИБ+"""";
									КонецПопытки; 
									Сообщение = Новый СообщениеПользователю;
									Сообщение.Текст = ТекстСообщения;
									Сообщение.КлючДанных = ОбъектСтруктура.Ссылка;
									Сообщение.Сообщить(); 
								КонецЕсли; 
								Значение = ОбъектИБ;
							Иначе
								Значение = ОбъектСтруктура.Ссылка;
							КонецЕсли; 
					ИначеЕсли ОбъектСтруктура.Свойство("TYPE") Тогда
						Если ОбъектСтруктура.TYPE = "ТаблицаЗначений" Тогда
							//Это таблица
							СтруктураТЗ = Новый Структура;
							ТаблицаРезультата = Новый ТаблицаЗначений;
							Для каждого Колонка Из ОбъектСтруктура.COLUMNS Цикл
								ТаблицаРезультата.Колонки.Добавить(Колонка.Ключ);
							КонецЦикла; 
							Для каждого СтрокаТаблицы Из ОбъектСтруктура.ROWS Цикл
								НоваяСтрока = ТаблицаРезультата.Добавить();
								ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицы);
							КонецЦикла; 
							Значение= ТаблицаРезультата;
						Иначе
							//Сюда мы попадать не должны
							Сообщить("Тип не определен:"+ОбъектСтруктура.TYPE);
						КонецЕсли; 
					Иначе
						//Иначе это обычная структура
						Значение = ОбъектСтруктура;
					КонецЕсли; 
					Возврат 0
				ИначеЕсли Х="[" Тогда
					//Начался массив
					//Массив - упорядоченная коллекция значений.
					//Массив начинается с "[" и заканчивается "]".
					//Значения разделены ",".
					Массив=Новый Массив;
					Пока Истина Цикл
						Режим=ПолучитьЗначениеJSON(СтрJSON,СтруктураТипов,Значение,Позиция);
						//0 - есть значение и не конец массива (запятая)
						//1 - есть значение и конец массива
						//2 - нет значения и не конец массива (запятая)
						//3 - нет значения и конец массива
						Если Режим=0 Тогда
							Массив.Добавить(Значение);
						ИначеЕсли Режим=1 Тогда
							Массив.Добавить(Значение);
							Прервать
						ИначеЕсли Режим=3 Тогда
							Прервать
						КонецЕсли;
					КонецЦикла;
					Если Массив.Количество() > 0 И ТипЗнч(Массив[0])=Тип("Структура") Тогда
						//Если мы получили массив структур, то это таблица
						ТаблицаРезультата = Новый ТаблицаЗначений;
						Для каждого Колонка Из Массив[0] Цикл
							ТаблицаРезультата.Колонки.Добавить(Колонка.Ключ);
						КонецЦикла; 
						Для каждого СтрокаТаблицы Из Массив Цикл
						    НоваяСтрока = ТаблицаРезультата.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицы);
						КонецЦикла; 
						Значение= ТаблицаРезультата;
					Иначе
						Значение=Массив;
					КонецЕсли; 
					Возврат 0
				ИначеЕсли Х="]" ИЛИ Х="}" Тогда
					//Закончился массив/объект
					Если ЗначениеВСтроке="" И Кавычек=0 Тогда
						Возврат 3 //нет значения и конец массива/объекта
					Иначе
						Значение=ПолучитьЗначениеИзСтроки(ЗначениеВСтроке,Кавычек);
						Возврат 1 //есть значение и конец массива/объекта
					КонецЕсли;
				ИначеЕсли Х=":" Тогда
					Ключ=ЗначениеВСтроке;
					Возврат ПолучитьЗначениеJSON(СтрJSON,СтруктураТипов,Значение,Позиция);

				Иначе
					// запятая
					Прервать
				КонецЕсли;

			Иначе
				ЗначениеВСтроке=ЗначениеВСтроке+Х;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если Кавычек>0 Тогда
		Значение=ЗначениеВКавычках(ЗначениеВСтроке);
	Иначе
		Если ЗначениеВСтроке="" Тогда
			Возврат 2
		Иначе
			Значение=ЗначениеБезКавычек(ЗначениеВСтроке)
		КонецЕсли;
	КонецЕсли;
	Возврат 0
КонецФункции

Функция Hex2Число(Hex) Экспорт
	Стр=ВРег(СокрЛП(Hex));
	Dec=0;
	Для Х=1 По СтрДлина(Стр) Цикл
		Dec=Dec+Найти("123456789ABCDEF",Сред(Стр,Х,1))*Pow(16,СтрДлина(Стр)-Х)
	КонецЦикла;
	Возврат Dec
КонецФункции

Функция ПолучитьЗначениеИзСтроки(ЗначениеВСтроке,Кавычек)
	Если Кавычек>0 Тогда
		Возврат ЗначениеВКавычках(ЗначениеВСтроке)
	ИначеЕсли ЗначениеВСтроке="" Тогда
		Возврат Неопределено
	КонецЕсли;
	Возврат ЗначениеБезКавычек(ЗначениеВСтроке)
КонецФункции

Функция ЗначениеВКавычках(ЗначениеВСтроке)
	//Это или строка или дата.
	//Дата пока не обрабатывается (потом надо дописать)
	//Пока всегда возвращаем просто строку
	Возврат ЗначениеВСтроке
КонецФункции

Функция ЗначениеБезКавычек(ЗначениеВСтроке)
	//Это число, булево или null.
	//Хотя здесь могут быть и строки. Например: {Code:123}
	Стр=ВРег(ЗначениеВСтроке);
	Если Стр="TRUE" Тогда Возврат Истина
	ИначеЕсли Стр="FALSE" Тогда Возврат Ложь
	ИначеЕсли Стр="NULL" Тогда Возврат Неопределено
	КонецЕсли;

	//Пробежимся по предполагаемому "числу"
	Экспонента=Ложь;
	ХХ=" ";
	Для Индекс=1 По СтрДлина(Стр) Цикл
		Х=Сред(Стр,Индекс,1);
		Если Найти("0123456789.+-",Х) Тогда
			ХХ=ХХ+Х
		ИначеЕсли Х="E" Тогда
			Экспонента=Истина;
			УУ=XMLЗначение(Тип("Число"),ХХ);
			ХХ=" ";
		Иначе
			Возврат ЗначениеВСтроке //Это точно не число, а строка
		КонецЕсли;
	КонецЦикла;

	ХХ=XMLЗначение(Тип("Число"),ХХ);
	Если Экспонента Тогда
		ХХ=УУ*Pow(10,ХХ)
	КонецЕсли;

	Возврат ХХ
КонецФункции

//Экранирует недопустимые символы
Функция Экранировать(Стр)
	Х=СтрЗаменить(Стр,"\","\\");
	Х=СтрЗаменить(Х,"""","\""");
	//Х=СтрЗаменить(Х,"'","\'"); //??? Не уверен в этой строке. Кто нибудь может подтвердить или опровергнуть нужность этой строки.
	Х=СтрЗаменить(Х,":","\:");
	Х=СтрЗаменить(Х,",","\,");
	Х=СтрЗаменить(Х,"/","\/"); //Тут тоже не уверен, но пока оставлю.
	Х=СтрЗаменить(Х,Символ(8),"\b");
	Х=СтрЗаменить(Х,Символы.ПФ,"\f");
	Х=СтрЗаменить(Х,Символы.ПС,"\n");
	Х=СтрЗаменить(Х,Символы.ВК,"\r");
	Х=СтрЗаменить(Х,Символы.ВТаб,"\t");
	Возврат Х
КонецФункции

//#КонецОбласти

&НаСервере
Процедура ЗаполнитьСтруктуруТипов()

	
	СоответствиеХМЛ = Новый Соответствие;	
//	СоответствиеХМЛ.Вставить(Тип(<Тип этой 1С базы>),<Тип 1С базы получателя>);
	СоответствиеХМЛ.Вставить(Тип("Дата"),"Дата");
	СоответствиеХМЛ.Вставить(Тип("ВидДвиженияНакопления"),"ВидДвиженияНакопления");
	СоответствиеХМЛ.Вставить(Тип("ДвоичныеДанные"),"ДвоичныеДанные");
	СоответствиеХМЛ.Вставить(Тип("ХранилищеЗначения"),"ХранилищеЗначения");
	СоответствиеХМЛ.Вставить(Тип("УникальныйИдентификатор"),"УникальныйИдентификатор");
	СоответствиеХМЛ.Вставить(Тип("ВидСчета"),"ВидСчета");
//	СоответствиеХМЛ.Вставить(Тип("ДокументСсылка.Поступление"),"ДокументСсылка.ПоступлениеТоваровУслуг");

	СоответствиеОбъектов = Новый Соответствие;	
//  ДЛЯ УКАЗАННЫХ ТУТ ОБЪЕКТОВ ОБЯЗАТЕЛЬНО УКАЗАНИЕ СООТВЕТСТВИЯ ССЫЛОК В СТРУКТУРЕ СоответствиеХМЛ	
//	СоответствиеОбъектов.Вставить(Тип(<Тип объекта этой 1С базы>),<Конструктор нового объекта базы получателя>);
//	СоответствиеОбъектов.Вставить(Тип("ДокументОбъект.Поступление"),"Документы.ПоступлениеТоваровУслуг.СоздатьДокумент()");

	МассивТиповТекст = Новый Массив;
	МассивТиповТекст.Добавить("Дата");
	МассивТиповТекст.Добавить("ВидДвиженияНакопления");
	МассивТиповТекст.Добавить("ДвоичныеДанные");
	МассивТиповТекст.Добавить("ХранилищеЗначения");
	МассивТиповТекст.Добавить("УникальныйИдентификатор");
	МассивТиповТекст.Добавить("ВидСчета");
	
	
	МассивОтсутствующихТипов = Новый Массив;
	
	Для каждого Документ Из Метаданные.Документы Цикл
		СоответствиеХМЛ.Вставить(Тип("ДокументСсылка."+Документ.Имя),"ДокументСсылка."+Документ.Имя);
		СоответствиеОбъектов.Вставить(Тип("ДокументОбъект."+Документ.Имя),"Документы."+Документ.Имя+".СоздатьДокумент()");
		МассивТиповТекст.Добавить("ДокументСсылка."+Документ.Имя);
	КонецЦикла; 
	Для каждого Справочник Из Метаданные.Справочники Цикл
		СоответствиеХМЛ.Вставить(Тип("СправочникСсылка."+Справочник.Имя),"СправочникСсылка."+Справочник.Имя);
		СоответствиеОбъектов.Вставить(Тип("СправочникОбъект."+Справочник.Имя),"Справочники."+Справочник.Имя+".СоздатьЭлемент()");
		МассивТиповТекст.Добавить("СправочникСсылка."+Справочник.Имя);
	КонецЦикла; 
	
	Для каждого ПланВидовХарактеристик Из Метаданные.ПланыВидовХарактеристик Цикл
		СоответствиеХМЛ.Вставить(Тип("ПланВидовХарактеристикСсылка."+ПланВидовХарактеристик.Имя),"ПланВидовХарактеристикСсылка."+ПланВидовХарактеристик.Имя);
		СоответствиеОбъектов.Вставить(Тип("ПланВидовХарактеристикОбъект."+ПланВидовХарактеристик.Имя),"ПланыВидовХарактеристик."+ПланВидовХарактеристик.Имя+".СоздатьЭлемент()");
		МассивТиповТекст.Добавить("ПланВидовХарактеристикСсылка."+ПланВидовХарактеристик.Имя);
	КонецЦикла; 
	Для каждого ПланВидовРасчета Из Метаданные.ПланыВидовРасчета Цикл
		СоответствиеХМЛ.Вставить(Тип("ПланВидовРасчетаСсылка."+ПланВидовРасчета.Имя),"ПланВидовРасчетаСсылка."+ПланВидовРасчета.Имя);
		СоответствиеОбъектов.Вставить(Тип("ПланВидовРасчетаОбъект."+ПланВидовРасчета.Имя),"ПланыВидовРасчета."+ПланВидовРасчета.Имя+".СоздатьВидРасчета()");
		МассивТиповТекст.Добавить("ПланВидовРасчетаСсылка."+ПланВидовРасчета.Имя);
	КонецЦикла; 
	Для каждого ПланСчетов Из Метаданные.ПланыСчетов Цикл
		СоответствиеХМЛ.Вставить(Тип("ПланСчетовСсылка."+ПланСчетов.Имя),"ПланСчетовСсылка."+ПланСчетов.Имя);
		СоответствиеОбъектов.Вставить(Тип("ПланСчетовОбъект."+ПланСчетов.Имя),"ПланыСчетов."+ПланСчетов.Имя+".СоздатьСчет()");
		МассивТиповТекст.Добавить("ПланСчетовСсылка."+ПланСчетов.Имя);
	КонецЦикла; 
	Для каждого Перечисление Из Метаданные.Перечисления Цикл
		СоответствиеХМЛ.Вставить(Тип("ПеречислениеСсылка."+Перечисление.Имя),"ПеречислениеСсылка."+Перечисление.Имя);
		МассивТиповТекст.Добавить("ПеречислениеСсылка."+Перечисление.Имя);
	КонецЦикла; 
	
	СтруктураТипов = Новый Структура("МассивОтсутствующихТипов,МассивТиповТекст,СоответствиеХМЛ,СоответствиеОбъектов,SAVE",МассивОтсутствующихТипов,МассивТиповТекст,СоответствиеХМЛ,СоответствиеОбъектов,Истина);
	ХранилищеСтруктурыТипов = Новый ХранилищеЗначения(СтруктураТипов);
	

КонецПроцедуры

&НаСервере
Функция ИмяФайла(ПараметрыОтчета)  
	
	ИмяФайла = "";
	Если ПараметрыОтчета.ВидОтчета = "001001" Тогда
		ИмяФайла = "RPDDV";	
	ИначеЕсли ПараметрыОтчета.ВидОтчета = "001002" Тогда
        ИмяФайла = "RPDDS";	
	ИначеЕсли  ПараметрыОтчета.ВидОтчета = "001003" Тогда
        ИмяФайла = "RPZP";		
	КонецЕсли;

	УИД_Отчета = СтрЗаменить(ПараметрыОтчета.Отчет.УникальныйИдентификатор(), "-","");
	
	ИмяФайла = ИмяФайла + "_" + ПараметрыОтчета.Период + "_" + ПараметрыОтчета.КодОрганизации + "_" + УИД_Отчета;
	
	Возврат ИмяФайла;
	
КонецФункции

&НаКлиенте
Процедура СписокОтчетовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекДанные = Элементы.СписокОтчетов.ТекущиеДанные;
	Если Элементы.СписокОтчетов.ТекущиеДанные <> Неопределено Тогда
		ПоказатьЗначение(, ТекДанные.РегламентированныйОтчет);
	КонецЕсли;
КонецПроцедуры





